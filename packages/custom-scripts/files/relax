#!/usr/bin/env bash
# shellcheck disable=SC2059

RESET="$(tput sgr0)"
BOLD="$(tput bold)"
BLUE="$(tput setaf 4)"
GREEN="$(tput setaf 2)"
RED="$(tput setaf 1)"
YELLOW="$(tput setaf 3)"
GREY="$(tput setaf 8)"

SUCCESS="\n${BOLD}${GREEN}%s${RESET}\n\n"
ERROR="\n${BOLD}${RED}%s${RESET}\n"

MAINSTEP="${BOLD}${BLUE}:: ${RESET}${BOLD}%s${RESET}\n"
STEP="${BOLD}${GREEN}==> ${RESET}${BOLD}%s${RESET}\n"
INPUT="${BOLD}${YELLOW}:: ${RESET}${BOLD}%s${RESET}"

readonly RESET BOLD BLUE GREEN RED YELLOW SUCCESS ERROR MAINSTEP INPUT STEP

function heading {
  local width
  width=$(tput cols 2> /dev/null)
  [ -z "$width" ] && width=50

  local text=$1
  # prints '#' for a whole line
  printf "${GREEN}%${width}.c\n" ' ' | sd ' ' '#'

  # centers the text
  #TODO replace with printf expression
  python3 -c "print(' ' * ((${width} - ${#text}) // 2), end='')"
  echo "$text"

  # prints '#' for a whole line
  printf "%${width}.c\n${RESET}" ' ' | sd ' ' '#'
}

function install_firefox_nightly {
  local dir
  local current
  dir="$(uu-mktemp -d)"
  current="$(pwd)"
  rmdir "$dir"
  git clone ssh://aur@aur.archlinux.org/firefox-nightly-bin.git "$dir"
  cd "$dir" || exit 1
  makepkg -s
  sudo pacman --color=auto -U ./*.pkg.tar.zst --noconfirm
  cd "$current" || exit 1
  rm -rf "$dir"
}

function rebuild_aur_packages {
  local tmpfile
  local line
  local package
  local packages
  local packages_reasons
  local name
  local idx

  printf "$STEP" "Checking incompatible packages with 'checkrebuild'..."
  tmpfile=$(mktemp)
  if ! checkrebuild > "$tmpfile"
  then
    printf "$ERROR" "Could not check for rebuild of packages!"
    exit 1
  fi

  printf "$STEP" "Checking install reasons for packages..."
  packages=()
  packages_reasons=()
  while read -r line
  do
    if [[ "$line" =~ ^foreign ]]
    then
      package="$(printf "%s" "$line" | cut -c9-)"
      name="$(pacman -Qi "$package" | grep 'Name' | cut -c19-)"

      if [ "$name" = "firefox-nightly-bin" ]
      then
        continue
      fi

      packages+=("$name")

      case "$(pacman -Qi "$package" | grep 'Install Reason' | cut -c19-)" in
        "Installed as a dependency for another package")
          packages_reasons+=("--asdeps")
          ;;
        "Explicitly installed")
          packages_reasons+=("--asexplicit")
          ;;
        *)
           printf "$ERROR" "Could not match install reason!"
           exit 1
           ;;
      esac
    fi
  done < "$tmpfile"

  if [ ${#packages[@]} -eq 0 ]
  then
    printf "No packages need to be rebuilt!\n"
  fi

  printf "$STEP" "Updating packages with buildaur..."
  buildaur -S "${packages[@]}"

  printf "$STEP" "Setting install reasons for packages..."
  idx=0
  for package in "${packages[@]}"; do
    sudo pacman -D "${packages_reasons[$idx]}" "$package"

    idx=$((idx++))
  done

  rm "$tmpfile"
}

function upgrade_pip {
  uu-printf "$MAINSTEP" "Getting out of date packages..."

  # Set up variables for this function
  local pkgjson  # JSON encoded packages that can be upgraded
  local pkglist  # A '\n' separated list of packages that can be upgraded
  local pkgcount  # The number of packages that will be upgraded
  local pkgversions  # A '\n' separated list of packages that can be upgraded in the format: '<NAME>%s<VERSION>'
  local pkg  # When looping over a pkglist, the current package to use
  local to_print  # What will be printed next, useful for character calculations
  local print_width  # How many characters wide $to_print is
  local current_width  # In which colum the cursor currently is
  local terminal_width  # How wide the terminal is
  local indent_width  # How far each new line should be indented, when displaying packages to up upgraded
  local choice  # When asking input from the user, read into this variable
  local idx  # current index when looping

  pkgjson=$(pip list --outdated --user --format=json)
  pkglist=$(uu-printf -- "$pkgjson" | jq --raw-output '.[].name')
  pkgcount=$(uu-printf -- "$pkgjson" | jq --raw-output '.[] | [.name, .version] | join("%s")' | wc --lines)
  pkgversions=$(uu-printf -- "$pkgjson" | jq --raw-output '.[] | [.name, .version] | join("%s")')

  uu-printf "$MAINSTEP" "Starting pip user upgrades..."
  if [ "$pkgcount" -eq 0 ]
  then
    uu-printf "All pip packages are up to date!\n"
    return 0
  fi

  # Nicely print and format all packages
  uu-printf "\n\033[0;1mPackages (%s) \033[0;0m" "$pkgcount"
  indent_width=$(uu-printf "Packages (%s) " "$pkgcount" | wc --chars)
  current_width=$indent_width
  terminal_width=$(tput cols)
  for pkg in $pkgversions
  do
    # Format as: '<pkgname>-<pkgversion> ' while '-<pkgversion>' is greyed out
    to_print=$(uu-printf -- "%s${RESET} " "$(uu-printf -- "$pkg" "%s" | sd '%s' "${GREY}-")")
    print_width=$(( $(uu-printf -- "$pkg " "-" | wc --chars) ))
    # If printing this would cause a line break, make a manual line break and indent next line
    if [ $(( "$print_width" + "$current_width" )) -ge "$terminal_width" ]
    then
      printf "\n%0${indent_width}s"
      current_width=0
    fi
    # Print out package name and version
    uu-printf -- "$to_print"
    # Prepare for next loop
    current_width=$(( "$current_width" + "$print_width" ))
  done

  # After displaying all packages, ask the user to proceed.
  # Accept 'Y', 'y', 'Yes', 'yes', 'YES' and '<ENTER>' as a continue and everything else as abort
  uu-printf -- "\n\n$INPUT" "Proceed with installation? [Y/n] "
  read -r choice
  if ! [[ "$choice" =~ [Yy(Yes|yes)] ]] && [ -n "$choice" ]
  then
    return 1
  fi

  # Upgrade all packages individually
  idx=1
  for pkg in $pkglist
  do
    # Show currently upgrading package...
    # Formatted as: '==> Upgrading <pkgname> (<number>/<total packages>)...'
    uu-printf "${GREEN}${BOLD}==>${RESET}${BOLD} Upgrading %s ($idx/$pkgcount)...${RESET}\n" "$pkg"
    if ! pip install --user --upgrade --compile "$pkg"
    then
      uu-printf "$ERROR" "Updating '$pkg' failed!"
      return 1
    fi
    idx=$(( "$idx" + 1 ))
  done
}

heading "Syncinc pacman packages and updating archlinux-keyring..."
if ! sudo pacman --color=auto -Sy archlinux-keyring --needed --noconfirm
then
  uu-printf "$ERROR" "Error updating archlinux keyring..."
  exit 1
fi
uu-printf "$SUCCESS" "Updated archlinux-keyring!"

heading "Updating pacman packages..."
if ! sudo pacman --color=auto -Su
then
  uu-printf "$ERROR" "Error updating pacman packages!"
  exit 1
fi
uu-printf "$SUCCESS" "Updated pacman packages!"

if which firefox-nightly &>/dev/null;then
  heading "Updating firefox-nightly-bin"
  if ! install_firefox_nightly
  then
    uu-printf "$ERROR" "Error updating firefox-nightly!"
    exit 1
  fi
  uu-printf "$SUCCESS" "Updated firefox-nightly!"
fi

if which buildaur &> /dev/null;then
  heading "Updating aur packages with buildaur..."
  if ! buildaur -Syu
  then
    uu-printf "$ERROR" "Error updating aur packages!"
    exit 1
  fi
  heading "Rebuilding incompatible packages ..."
  if ! rebuild_aur_packages
  then
    uu-printf "$ERROR" "Error rebuilding incompatible packages!"
    exit 1
  fi
  uu-printf "$MAINSTEP" "Clearing package cache..."
  if ! yes | buildaur --clear
  then
    uu-printf "$ERROR" "Error clearing the package cache!"
    exit 1
  fi
  uu-printf "$SUCCESS" "Updated AUR packages!"
fi

if which snap &> /dev/null;then
  heading "Updating snap packages..."
  if ! sudo snap refresh
  then
    uu-printf "$ERROR" "Error updating snap packages!"
    exit 1
  fi
  uu-printf "$SUCCESS" "Updated snap packages!"
fi

if which flatpak &> /dev/null;then
  heading "Updating flatpaks..."
  if ! flatpak update
  then
    uu-printf "$ERROR" "Error updating flatpaks!"
    exit 1
  fi
  uu-printf "$SUCCESS" "Updated flatpaks!"
fi

if which rustup &> /dev/null;then
  heading "Updating rust..."
  if ! rustup update
  then
    uu-printf "$ERROR" "Error updating rust!"
    exit 1
  fi
  uu-printf "$SUCCESS" "Updated rust!"
fi

if which cargo &> /dev/null;then
  heading "Updating cargo crates..."
  if ! cargo install-update --all
  then
    uu-printf "$ERROR" "Error updating cargo crates!"
    exit 1
  fi
  uu-printf "$SUCCESS" "Updated cargo crates!"
fi

if which pip &> /dev/null
then
  heading "Updating pip packages..."
  if ! upgrade_pip
  then
    uu-printf "$ERROR" "Error updating pip packages!"
    exit 1
  fi
  uu-printf "$SUCCESS" "Updated pip packages!"
fi

if which nvim &> /dev/null
then
  heading "Updating neovim plugins..."
  uu-printf "$STEP" "Updating plugins with Lazy..."
  if ! nvim -c 'autocmd User LazyUpdate quitall' -c 'autocmd User VeryLazy Lazy update'
  then
    uu-printf "$ERROR" "Error updating neovim plugins!"
    exit 1
  fi
  uu-printf "$STEP" "Updating language servers, linters, formatters with Mason..."
  if ! nvim -c 'autocmd User MasonUpdateAllComplete quitall' -c 'autocmd User VeryLazy MasonUpdateAll'
  then
    uu-printf "$ERROR" "Error updating neovim language servers, linters and formatter!"
    exit 1
  fi
  uu-printf "$STEP" "Updating Highlighters with TreeSitter..."
  if ! nvim -c 'autocmd User VeryLazy lua require("nvim-treesitter.install").update({ with_sync = true })(); vim.cmd(":q")'
  then
    uu-printf "$ERROR" "Error updating neovim language servers, linters and formatter!"
    exit 1
  fi
  uu-printf "$SUCCESS" "Updated neovim plugins!"
fi

