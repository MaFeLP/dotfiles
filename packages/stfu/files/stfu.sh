#!/usr/bin/env bash

# Global Pipe file for stfu client-server communication
PIPE="/run/user/$(id -u)/stfu.pipe"

# Function to run when the server exists, cleans up some stuff.
function server_exit() {
  echo -e "\nExiting stfu server..."
  echo "==> Removing unused tempfile..."
  rm "${tempfile}"
  echo "==> Removing pipe..."
  rm "$PIPE"
  exit 0
}

# The function that starts the stfu listener/server
function server() {
  # set the server_exit function to run on Ctrl+C
  trap 'server_exit' INT

  # Create listening pipe
  if ! [ -e "$PIPE" ];then
    echo "Creating pipe at $PIPE..."
    mkfifo "$PIPE"
  fi

  # Start the actual execution loop
  while true;do
    tempfile=$(mktemp)
    echo "Creating temporary exec file \"$tempfile\"..."
    cat <<EOF > "$tempfile"
#!/usr/bin/env bash

# Generated by 'stfu' to use as temp exec file
# This file will delete itself, once it is finished executing.
EOF
    echo "Listening for new exec commands..."
    cat "$PIPE" >> "$tempfile"
    echo "/usr/bin/rm \"$tempfile\"" >> "$tempfile"
    bat "$tempfile"
    chmod +x "$tempfile"
    echo "Executing query..."
    /usr/bin/bash "$tempfile" &> /dev/null &
    echo ""
  done
}

# The client function
function client() {
  if ! [ -e "$PIPE" ];then
    echo "Server not started: Could not find pipe"
    exit 1
  fi

  cat <<EOF >> "$PIPE"
cd "$(pwd)"
$@
EOF
}

if [ -z "$1" ] || [ "$1" = "-h" ] || [ "$1" = "--help" ] || [ "$1" = "-?" ];then
  cat <<EOF
stfu - shut the fuck up

Executes a command in the background, without outputting its output.

Usage:

1. Start the daemon/server (enable systemd-unit)
2. Place this script into your PATH (often times already done)
3. Place 'stfu' in front of your command to run the command in the background.

Options:
    --daemon    -d      Run this script as the daemon.
    --server    -s      Same as -d
    --help      -h  -?  Show this help dialog
EOF
elif [ "$1" = "--server" ] || [ "$1" = "-s" ] || [ "$1" = "-d" ] || [ "$1" = "--daemon" ];then
  server
else
  client "$@"
fi

